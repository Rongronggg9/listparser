name: "Test"

on:
  - "push"
  - "pull_request"

jobs:
  build:
    name: "Build wheel"
    runs-on: "ubuntu-latest"
    outputs:
      wheel-filename: "${{ steps.get-filename.outputs.wheel-filename }}"
    steps:
      - name: "Checkout branch"
        uses: "actions/checkout@v3"

      - name: "Setup Python"
        id: "setup-python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            tox.ini
            .github/workflows/test.yaml

      - name: "Build the project"
        run: "pip wheel ."

      - name: "Identify the wheel filename"
        id: "get-filename"
        run: 'echo "wheel-filename=$(ls -1 *.whl | head -n 1)" >> $GITHUB_OUTPUT'

      - name: "Upload the build artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "listparser-${{ github.sha }}.whl"
          path: "${{ steps.get-filename.outputs.wheel-filename }}"
          retention-days: 1

  test:
    needs: "build"

    strategy:
      matrix:
        os:
          - name: "Ubuntu"
            id: "ubuntu-latest"
        python:
          - setup-id: "3.11"
            tox-id: "py311"
          - setup-id: "3.10"
            tox-id: "py310"
          - setup-id: "3.9"
            tox-id: "py39"
          - setup-id: "3.8"
            tox-id: "py38"
          - setup-id: "3.7"
            tox-id: "py37"
        extras:
          - "-http-lxml"

        include:
          # Test without extras on Ubuntu.
          - os:
              name: "Ubuntu"
              id: "ubuntu-latest"
            python:
              setup-id: "3.7"
              tox-id: "py37"
            extras: ""

          # Test minimum dependencies on Ubuntu.
          - os:
              name: "Ubuntu"
              id: "ubuntu-latest"
            python:
              setup-id: "3.7"
              tox-id: "py37"
            extras: "-minimum_dependencies"

          # Test pypy, without extras, on Ubuntu.
          - os:
              name: "Ubuntu"
              id: "ubuntu-latest"
            python:
              setup-id: "pypy3.9"
              tox-id: "pypy39"
            extras: ""

          # Test lowest and highest versions on Windows.
          - os:
              name: "Windows"
              id: "windows-latest"
            python:
              setup-id: "3.7"
              tox-id: "py37"
          - os:
              name: "Windows"
              id: "windows-latest"
            python:
              setup-id: "3.11"
              tox-id: "py311"

          # Test lowest and highest versions on Mac.
          - os:
              name: "MacOS"
              id: "macos-latest"
            python:
              setup-id: "3.7"
              tox-id: "py37"
          - os:
              name: "MacOS"
              id: "macos-latest"
            python:
              setup-id: "3.11"
              tox-id: "py311"

    name: "Test ${{ matrix.python.tox-id }}${{ matrix.extras }} on ${{ matrix.os.name }}"
    runs-on: "${{ matrix.os.id }}"
    steps:
      - name: "Checkout branch"
        uses: "actions/checkout@v3"

      - name: "Setup Python (${{ matrix.python.setup-id }})"
        id: "setup-python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python.setup-id }}"
          # Cache packages that pip downloads.
          # This does not cache the installed files.
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            tox.ini
            .github/workflows/test.yaml

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@v3"
        with:
          path: |
            .venv
            .tox/${{ matrix.python.tox-id }}${{ matrix.extras }}-ci
          key: >
            cache
            os=${{ matrix.os.id }}
            python=${{ steps.setup-python.outputs.python-version }}
            hash=${{ hashFiles('pyproject.toml', 'tox.ini', '.github/workflows/test.yaml') }}
            tox=${{ matrix.python.tox-id }}${{ matrix.extras }}

      - name: "Identify venv path"
        shell: "bash"
        run: "echo 'venv-path=${{ runner.os == 'Windows' && '.venv/Scripts' || '.venv/bin' }}' >> $GITHUB_ENV"

      - name: "Create a virtual environment"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Download the build artifact"
        uses: "actions/download-artifact@v3"
        with:
          name: "listparser-${{ github.sha }}.whl"

      - name: "Test (${{ matrix.python.tox-id }}${{ matrix.extras }})"
        # NOTE: The trailing "-ci" marker disables coverage.
        # If the trailing marker ever changes, then update the caching above.
        run: >
          ${{ env.venv-path }}/tox run
          --installpkg "${{ needs.build.outputs.wheel-filename }}"
          -e ${{ matrix.python.tox-id }}${{ matrix.extras }}-ci
